<ModelBehaviors>
	<Include ModelBehaviorFile="Asobo\Generic.xml"/>
	<Include ModelBehaviorFile="Asobo\Common\Inputs\Autopilot_Inputs.xml"/>

	<!-- KAP 140 -->
	<Template Name="C152X_KAP140_Template">
		<Parameters Type="Default">
			<ID>1</ID>
		</Parameters>
		<UseTemplate Name="ASOBO_GT_Helper_Suffix_ID_Appender">
			<TEMPLATE_TO_CALL>C152X_KAP140_SubTemplate</TEMPLATE_TO_CALL>
		</UseTemplate>
	</Template>

	<Template Name="C152X_KAP140_SubTemplate">
		<Parameters Type="Default">
			<USE_INPUT_EVENT>AUTOPILOT</USE_INPUT_EVENT>
			<INPUT_EVENT_ID_SOURCE>AUTOPILOT_KAP140#SUFFIX_ID#</INPUT_EVENT_ID_SOURCE>
			<NO_SIMVAR_LIGHT/>
			<EMISSIVE_CODE>1</EMISSIVE_CODE>
			<ANIM_NEVER_FAILS/>
			<NO_TEXT_EMISSIVE>True</NO_TEXT_EMISSIVE>
			<NO_INDICATOR>True</NO_INDICATOR>
			<BUTTON_EMISSIVE>True</BUTTON_EMISSIVE>
			<KEY_PREFIX>KAP140</KEY_PREFIX>
			<WWISE_EVENT_1>transponder_push_button_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>transponder_push_button_off</WWISE_EVENT_2>
			<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
			<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
			<FAILURE>(A:CIRCUIT AUTOPILOT ON, Bool)</FAILURE>
			<!-- NODE_IDs & ANIM_NAMEs -->
			<AP_NODE_ID>AUTOPILOT_Push_Autopilot#SUFFIX_ID#</AP_NODE_ID>
			<AP_ANIM_NAME>AUTOPILOT_Push_Autopilot#SUFFIX_ID#</AP_ANIM_NAME>
			<HDG_NODE_ID>AUTOPILOT_Push_Heading#SUFFIX_ID#</HDG_NODE_ID>
			<HDG_ANIM_NAME>AUTOPILOT_Push_Heading#SUFFIX_ID#</HDG_ANIM_NAME>
			<NAV_NODE_ID>AUTOPILOT_Push_Navigation#SUFFIX_ID#</NAV_NODE_ID>
			<NAV_ANIM_NAME>AUTOPILOT_Push_Navigation#SUFFIX_ID#</NAV_ANIM_NAME>
			<APR_NODE_ID>AUTOPILOT_Push_Approach#SUFFIX_ID#</APR_NODE_ID>
			<APR_ANIM_NAME>AUTOPILOT_Push_Approach#SUFFIX_ID#</APR_ANIM_NAME>
			<BC_NODE_ID>AUTOPILOT_Push_BackCourse#SUFFIX_ID#</BC_NODE_ID>
			<BC_ANIM_NAME>AUTOPILOT_Push_BackCourse#SUFFIX_ID#</BC_ANIM_NAME>
			<ALT_NODE_ID>AUTOPILOT_Push_Altitude#SUFFIX_ID#</ALT_NODE_ID>
			<ALT_ANIM_NAME>AUTOPILOT_Push_Altitude#SUFFIX_ID#</ALT_ANIM_NAME>
			<UP_NODE_ID>AUTOPILOT_Push_VerticalSpeed_Up#SUFFIX_ID#</UP_NODE_ID>
			<UP_ANIM_NAME>AUTOPILOT_Push_VerticalSpeed_Up#SUFFIX_ID#</UP_ANIM_NAME>
			<DN_NODE_ID>AUTOPILOT_Push_VerticalSpeed_Down#SUFFIX_ID#</DN_NODE_ID>
			<DN_ANIM_NAME>AUTOPILOT_Push_VerticalSpeed_Down#SUFFIX_ID#</DN_ANIM_NAME>
			<FLC_NODE_ID>AUTOPILOT_Push_FlightLevelChange#SUFFIX_ID#</FLC_NODE_ID>
			<FLC_ANIM_NAME>AUTOPILOT_Push_FlightLevelChange#SUFFIX_ID#</FLC_ANIM_NAME>
			<VS_NODE_ID>AUTOPILOT_Push_VerticalSpeed#SUFFIX_ID#</VS_NODE_ID>
			<VS_ANIM_NAME>AUTOPILOT_Push_VerticalSpeed#SUFFIX_ID#</VS_ANIM_NAME>
			<KNOB_100_NODE_ID>AUTOPILOT_Knob_Altitude_100#SUFFIX_ID#</KNOB_100_NODE_ID>
			<KNOB_100_ANIM_NAME>AUTOPILOT_Knob_Altitude_100#SUFFIX_ID#</KNOB_100_ANIM_NAME>
			<KNOB_1000_NODE_ID>AUTOPILOT_Knob_Altitude_1000#SUFFIX_ID#</KNOB_1000_NODE_ID>
			<KNOB_1000_ANIM_NAME>AUTOPILOT_Knob_Altitude_1000#SUFFIX_ID#</KNOB_1000_ANIM_NAME>
		</Parameters>
		<Parameters Type="Override">
			<SIM_STATE_IS_ON_EXTERNAL>l0</SIM_STATE_IS_ON_EXTERNAL>
		</Parameters>
		<EditableTemplateParameters>
			<AddParams>
				<AP_NODE_ID></AP_NODE_ID>
				<AP_ANIM_NAME></AP_ANIM_NAME>
				<HDG_NODE_ID></HDG_NODE_ID>
				<HDG_ANIM_NAME></HDG_ANIM_NAME>
				<NAV_NODE_ID></NAV_NODE_ID>
				<NAV_ANIM_NAME></NAV_ANIM_NAME>
				<APR_NODE_ID></APR_NODE_ID>
				<APR_ANIM_NAME></APR_ANIM_NAME>
				<BC_NODE_ID></BC_NODE_ID>
				<BC_ANIM_NAME></BC_ANIM_NAME>
				<ALT_NODE_ID></ALT_NODE_ID>
				<ALT_ANIM_NAME></ALT_ANIM_NAME>
				<UP_NODE_ID></UP_NODE_ID>
				<UP_ANIM_NAME></UP_ANIM_NAME>
				<DN_NODE_ID></DN_NODE_ID>
				<DN_ANIM_NAME></DN_ANIM_NAME>
				<FLC_NODE_ID></FLC_NODE_ID>
				<FLC_ANIM_NAME></FLC_ANIM_NAME>
				<VS_NODE_ID></VS_NODE_ID>
				<VS_ANIM_NAME></VS_ANIM_NAME>
				<KNOB_100_NODE_ID></KNOB_100_NODE_ID>
				<KNOB_100_ANIM_NAME></KNOB_100_ANIM_NAME>
				<KNOB_1000_NODE_ID></KNOB_1000_NODE_ID>
				<KNOB_1000_ANIM_NAME></KNOB_1000_ANIM_NAME>
			</AddParams>
		</EditableTemplateParameters>
		<!-- AP -->
		<Component ID="#AP_NODE_ID#" Node="#AP_NODE_ID#">
			<Parameters Type="Override">
				<BTN_ID>AP</BTN_ID>
			</Parameters>
			<UseInputEvent ID="#USE_INPUT_EVENT#">
				<SET_STATE_EXTERNAL>p0 if{ (&gt;H:#KEY_PREFIX#_Push_AP) }</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(A:AUTOPILOT MASTER, Bool) sp0</GET_STATE_EXTERNAL>
				<BINDING_INC_0>Push</BINDING_INC_0>
				<BINDING_INC_0_PARAM_0>1</BINDING_INC_0_PARAM_0>
				<TT_DESCRIPTION_ID>@TT_Package.AUTOPILOT_PUSH_AUTOPILOT_ACTION_SET</TT_DESCRIPTION_ID>
				<SIMVAR_TO_WATCH_0>AUTOPILOT MASTER</SIMVAR_TO_WATCH_0>
				<!-- Enable VS mode when AP is enabled -->
				<GET_INIT_STATE_EXTERNAL>(A:AUTOPILOT MASTER, Bool) s0 (A:AUTOPILOT VERTICAL HOLD, Bool) ! and if{ (&gt;K:AP_PANEL_VS_HOLD) } l0</GET_INIT_STATE_EXTERNAL>
			</UseInputEvent>
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<ANIM_NAME>#AP_ANIM_NAME#</ANIM_NAME>
				<LEFT_SINGLE_CODE>(&gt;B:#INPUT_EVENT_ID_SOURCE#_#BTN_ID#_Push)</LEFT_SINGLE_CODE>
				<TOOLTIP_TITLE>@TT_Package.AUTOPILOT_PUSH_AUTOPILOT_TITLE</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>#INPUT_EVENT_ID_SOURCE#_#BTN_ID#</TOOLTIP_ENTRY_0>
				<PART_ID>AUTOPILOT_Push_Autopilot</PART_ID>
			</UseTemplate>
			<!-- TODO:enable VS on AP MASTER activation -->
		</Component>
		<!-- HDG -->
		<Component ID="#HDG_NODE_ID#" Node="#HDG_NODE_ID#">
			<Parameters Type="Override">
				<BTN_ID>HDG</BTN_ID>
			</Parameters>
			<UseInputEvent ID="#USE_INPUT_EVENT#">
				<SET_STATE_EXTERNAL>p0 if{ (&gt;H:#KEY_PREFIX#_Push_HDG) }</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(A:AUTOPILOT HEADING LOCK, Bool) sp0</GET_STATE_EXTERNAL>
				<BINDING_INC_0>Push</BINDING_INC_0>
				<BINDING_INC_0_PARAM_0>1</BINDING_INC_0_PARAM_0>
				<SIMVAR_TO_WATCH_0>AUTOPILOT HEADING LOCK</SIMVAR_TO_WATCH_0>
				<TT_DESCRIPTION_ID>@TT_Package.AUTOPILOT_PUSH_HEADING_ACTION_SET</TT_DESCRIPTION_ID>
			</UseInputEvent>
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<ANIM_NAME>#HDG_ANIM_NAME#</ANIM_NAME>
				<LEFT_SINGLE_CODE>(&gt;B:#INPUT_EVENT_ID_SOURCE#_#BTN_ID#_Push)</LEFT_SINGLE_CODE>
				<TOOLTIP_TITLE>@TT_Package.AUTOPILOT_PUSH_HEADING_TITLE</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>#INPUT_EVENT_ID_SOURCE#_#BTN_ID#</TOOLTIP_ENTRY_0>
			</UseTemplate>
		</Component>
		<!-- NAV -->
		<Component ID="#NAV_NODE_ID#" Node="#NAV_NODE_ID#">
			<Parameters Type="Override">
				<BTN_ID>NAV</BTN_ID>
			</Parameters>
			<UseInputEvent ID="#USE_INPUT_EVENT#">
				<SET_STATE_EXTERNAL>p0 if{ (&gt;H:#KEY_PREFIX#_Push_NAV) }</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(A:AUTOPILOT NAV1 LOCK, Bool) sp0</GET_STATE_EXTERNAL>
				<BINDING_INC_0>Push</BINDING_INC_0>
				<BINDING_INC_0_PARAM_0>1</BINDING_INC_0_PARAM_0>
				<SIMVAR_TO_WATCH_0>AUTOPILOT NAV1 LOCK</SIMVAR_TO_WATCH_0>
				<TT_DESCRIPTION_ID>@TT_Package.AUTOPILOT_PUSH_NAVIGATION_ACTION_SET</TT_DESCRIPTION_ID>
			</UseInputEvent>
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<ANIM_NAME>#NAV_ANIM_NAME#</ANIM_NAME>
				<LEFT_SINGLE_CODE>(&gt;B:#INPUT_EVENT_ID_SOURCE#_#BTN_ID#_Push)</LEFT_SINGLE_CODE>
				<TOOLTIP_TITLE>@TT_Package.AUTOPILOT_PUSH_NAVIGATION_TITLE</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>#INPUT_EVENT_ID_SOURCE#_#BTN_ID#</TOOLTIP_ENTRY_0>
			</UseTemplate>
		</Component>
		<!-- APR -->
		<Component ID="#APR_NODE_ID#" Node="#APR_NODE_ID#">
			<Parameters Type="Override">
				<BTN_ID>APR</BTN_ID>
			</Parameters>
			<UseInputEvent ID="#USE_INPUT_EVENT#">
				<SET_STATE_EXTERNAL>p0 if{ (&gt;H:#KEY_PREFIX#_Push_APR) }</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(A:AUTOPILOT APPROACH HOLD, Bool) sp0</GET_STATE_EXTERNAL>
				<BINDING_INC_0>Push</BINDING_INC_0>
				<BINDING_INC_0_PARAM_0>1</BINDING_INC_0_PARAM_0>
				<SIMVAR_TO_WATCH_0>AUTOPILOT APPROACH HOLD</SIMVAR_TO_WATCH_0>
				<TT_DESCRIPTION_ID>@TT_Package.AUTOPILOT_PUSH_APPROACH_ACTION</TT_DESCRIPTION_ID>
			</UseInputEvent>
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<ANIM_NAME>#APR_ANIM_NAME#</ANIM_NAME>
				<LEFT_SINGLE_CODE>(&gt;B:#INPUT_EVENT_ID_SOURCE#_#BTN_ID#_Push)</LEFT_SINGLE_CODE>
				<TOOLTIP_TITLE>@TT_Package.AUTOPILOT_PUSH_APPROACH_TITLE</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>#INPUT_EVENT_ID_SOURCE#_#BTN_ID#</TOOLTIP_ENTRY_0>
			</UseTemplate>
		</Component>
		<!-- REV -->
		<Component ID="#BC_NODE_ID#" Node="#BC_NODE_ID#">
			<Parameters Type="Override">
				<BTN_ID>REV</BTN_ID>
			</Parameters>
			<UseInputEvent ID="#USE_INPUT_EVENT#">
				<SET_STATE_EXTERNAL>p0 if{ (&gt;H:#KEY_PREFIX#_Push_REV) }</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(A:AUTOPILOT BACKCOURSE HOLD, Bool) sp0</GET_STATE_EXTERNAL>
				<BINDING_INC_0>Push</BINDING_INC_0>
				<BINDING_INC_0_PARAM_0>1</BINDING_INC_0_PARAM_0>
				<SIMVAR_TO_WATCH_0>AUTOPILOT BACKCOURSE HOLD</SIMVAR_TO_WATCH_0>
				<TT_DESCRIPTION_ID>@TT_Package.AUTOPILOT_PUSH_BACKCOURSE_ACTION_SET</TT_DESCRIPTION_ID>
			</UseInputEvent>
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<ANIM_NAME>#BC_ANIM_NAME#</ANIM_NAME>
				<LEFT_SINGLE_CODE>(&gt;B:#INPUT_EVENT_ID_SOURCE#_#BTN_ID#_Push)</LEFT_SINGLE_CODE>
				<TOOLTIP_TITLE>@TT_Package.AUTOPILOT_PUSH_BACKCOURSE_TITLE</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>#INPUT_EVENT_ID_SOURCE#_#BTN_ID#</TOOLTIP_ENTRY_0>
			</UseTemplate>
		</Component>
		<!-- ALT -->
		<Component ID="#ALT_NODE_ID#" Node="#ALT_NODE_ID#">
			<Parameters Type="Override">
				<BTN_ID>ALT</BTN_ID>
			</Parameters>
			<UseInputEvent ID="#USE_INPUT_EVENT#">
				<SET_STATE_EXTERNAL>p0 if{ (&gt;H:#KEY_PREFIX#_Push_ALT) }</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(A:AUTOPILOT ALTITUDE LOCK, Bool) sp0</GET_STATE_EXTERNAL>
				<BINDING_INC_0>Push</BINDING_INC_0>
				<BINDING_INC_0_PARAM_0>1</BINDING_INC_0_PARAM_0>
				<SIMVAR_TO_WATCH_0>AUTOPILOT ALTITUDE LOCK</SIMVAR_TO_WATCH_0>
				<TT_DESCRIPTION_ID>@TT_Package.AUTOPILOT_PUSH_ALTITUDE_ACTION_SET</TT_DESCRIPTION_ID>
			</UseInputEvent>
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<ANIM_NAME>#ALT_ANIM_NAME#</ANIM_NAME>
				<LEFT_SINGLE_CODE>(&gt;B:#INPUT_EVENT_ID_SOURCE#_#BTN_ID#_Push)</LEFT_SINGLE_CODE>
				<TOOLTIP_TITLE>@TT_Package.AUTOPILOT_PUSH_ALTITUDE_TITLE</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>#INPUT_EVENT_ID_SOURCE#_#BTN_ID#</TOOLTIP_ENTRY_0>
			</UseTemplate>
		</Component>
		<!-- UP -->
		<Component ID="#UP_NODE_ID#" Node="#UP_NODE_ID#">
			<Parameters Type="Override">
				<BTN_ID>UP</BTN_ID>
			</Parameters>
			<UseInputEvent ID="#USE_INPUT_EVENT#">
				<SET_STATE_EXTERNAL>p0 if{ (&gt;H:#KEY_PREFIX#_Push_UP) }</SET_STATE_EXTERNAL>
				<BINDING_INC_0>Push</BINDING_INC_0>
				<BINDING_INC_0_PARAM_0>1</BINDING_INC_0_PARAM_0>
				<TT_DESCRIPTION_ID>@TT_Package.AUTOPILOT_PUSH_VERTICALSPEED_ACTION</TT_DESCRIPTION_ID>
				<TT_VALUE>(A:AUTOPILOT VERTICAL HOLD VAR:1, feet per minute) '%d ft/min' @sprintf</TT_VALUE>
				<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
			</UseInputEvent>
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<ANIM_NAME>#UP_ANIM_NAME#</ANIM_NAME>
				<LEFT_SINGLE_CODE>(&gt;B:#INPUT_EVENT_ID_SOURCE#_#BTN_ID#_Push)</LEFT_SINGLE_CODE>
				<TOOLTIP_TITLE>@TT_Package.AUTOPILOT_PUSH_VERTICALSPEED_TITLE</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>#INPUT_EVENT_ID_SOURCE#_#BTN_ID#</TOOLTIP_ENTRY_0>
			</UseTemplate>
		</Component>
		<!-- DN -->
		<Component ID="#DN_NODE_ID#" Node="#DN_NODE_ID#">
			<Parameters Type="Override">
				<BTN_ID>DN</BTN_ID>
			</Parameters>
			<UseInputEvent ID="#USE_INPUT_EVENT#">
				<SET_STATE_EXTERNAL>p0 if{ (&gt;H:#KEY_PREFIX#_Push_DN) }</SET_STATE_EXTERNAL>
				<BINDING_INC_0>Push</BINDING_INC_0>
				<BINDING_INC_0_PARAM_0>1</BINDING_INC_0_PARAM_0>
				<TT_DESCRIPTION_ID>@TT_Package.AUTOPILOT_PUSH_VERTICALSPEED_ACTION</TT_DESCRIPTION_ID>
				<TT_VALUE>(A:AUTOPILOT VERTICAL HOLD VAR:1, feet per minute) '%d ft/min' @sprintf</TT_VALUE>
				<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
			</UseInputEvent>
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<ANIM_NAME>#DN_ANIM_NAME#</ANIM_NAME>
				<LEFT_SINGLE_CODE>(&gt;B:#INPUT_EVENT_ID_SOURCE#_#BTN_ID#_Push)</LEFT_SINGLE_CODE>
				<TOOLTIP_TITLE>@TT_Package.AUTOPILOT_PUSH_VERTICALSPEED_TITLE</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>#INPUT_EVENT_ID_SOURCE#_#BTN_ID#</TOOLTIP_ENTRY_0>
			</UseTemplate>
		</Component>
		<!-- BARO -->
		<Component ID="#FLC_NODE_ID#" Node="#FLC_NODE_ID#">
			<Parameters Type="Override">
				<BTN_ID>BARO</BTN_ID>
				<LONG_CLICK_TIME>2</LONG_CLICK_TIME>
			</Parameters>
			<UseInputEvent ID="#USE_INPUT_EVENT#">
				<ANIM>HOLD</ANIM>
				<!-- Configure event processing -->
				<SET_ARG_COUNT>2</SET_ARG_COUNT><!-- p0: Press/Release, p1:PressDuration, 0 = infinite (if pressing) -->
				<SET_STATE_EXTERNAL>p0 sp0
					l0 1 == if{ (O:_PressTime) 0 &gt; if{ (E:SIMULATION TIME, second) (O:_PressTime) - #LONG_CLICK_TIME# &lt; if{ (&gt;H:#KEY_PREFIX#_Push_BARO) } els{ (&gt;H:#KEY_PREFIX#_Long_Push_BARO) } 0 (&gt;O:_PressTime) } }
					l0 2 == if{ (E:SIMULATION TIME, second) (&gt;O:_PressTime) p1 (&gt;O:_PressForDuration) }
				</SET_STATE_EXTERNAL>
				<!-- Configure binding for longpress event -->
				<BINDING_SET_0>Push_Long</BINDING_SET_0>
				<BINDING_SET_0_PARAM_0>1</BINDING_SET_0_PARAM_0>
				<BINDING_SET_0_PARAM_1>#LONG_CLICK_TIME#</BINDING_SET_0_PARAM_1>
				<BINDING_INC_0>Push</BINDING_INC_0>
				<BINDING_INC_0_PARAM_0>1</BINDING_INC_0_PARAM_0>
				<BINDING_DEC_0>Release</BINDING_DEC_0>
				<BINDING_DEC_0_PARAM_0>0</BINDING_DEC_0_PARAM_0>
				<SIMVAR_TO_WATCH_0>AUTOPILOT FLIGHT LEVEL CHANGE</SIMVAR_TO_WATCH_0>
				<TT_DESCRIPTION_ID>@TT_Package.AUTOPILOT_PUSH_BARO_ACTION_SET</TT_DESCRIPTION_ID>
				<GET_STATE_EXTERNAL>(A:AUTOPILOT FLIGHT LEVEL CHANGE, Bool) sp0</GET_STATE_EXTERNAL>
			</UseInputEvent>
			<UseTemplate Name = "ASOBO_GT_Push_Button_Timed">
				<TOOLTIP_TITLE>@TT_Package.AUTOPILOT_PUSH_BARO_TITLE</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>#INPUT_EVENT_ID_SOURCE#_#BTN_ID#</TOOLTIP_ENTRY_0>
				<ANIM_NAME>#FLC_ANIM_NAME#</ANIM_NAME>
				<!-- Simply push/release the button -->
				<LEFT_SINGLE_CODE>(&gt;B:#INPUT_EVENT_ID_SOURCE#_#BTN_ID#_Push)</LEFT_SINGLE_CODE>
				<SHORT_CLICK_CODE>(&gt;B:#INPUT_EVENT_ID_SOURCE#_#BTN_ID#_Release)</SHORT_CLICK_CODE>
				<LONG_CLICK_CODE>(&gt;B:#INPUT_EVENT_ID_SOURCE#_#BTN_ID#_Release)</LONG_CLICK_CODE>
			</UseTemplate>
		</Component>
		<!-- ARM -->
		<Component ID="#VS_NODE_ID#" Node="#VS_NODE_ID#">
			<Parameters Type="Override">
				<BTN_ID>ARM</BTN_ID>
			</Parameters>
			<UseInputEvent ID="#USE_INPUT_EVENT#">
				<SET_STATE_EXTERNAL>p0 if{ (&gt;H:#KEY_PREFIX#_Push_ARM) }</SET_STATE_EXTERNAL>
				<BINDING_INC_0>Push</BINDING_INC_0>
				<BINDING_INC_0_PARAM_0>1</BINDING_INC_0_PARAM_0>
				<SIMVAR_TO_WATCH_0>AUTOPILOT VERTICAL HOLD</SIMVAR_TO_WATCH_0>
				<TT_DESCRIPTION_ID>@TT_Package.AUTOPILOT_PUSH_VERTICALSPEED_ACTION_SET</TT_DESCRIPTION_ID>
				<GET_STATE_EXTERNAL>(A:AUTOPILOT VERTICAL HOLD, Bool) sp0</GET_STATE_EXTERNAL>
			</UseInputEvent>
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<ANIM_NAME>#VS_ANIM_NAME#</ANIM_NAME>
				<LEFT_SINGLE_CODE>(&gt;B:#INPUT_EVENT_ID_SOURCE#_#BTN_ID#_Push)</LEFT_SINGLE_CODE>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>ALT ARM</TOOLTIPID>
				<TOOLTIP_ENTRY_0>#INPUT_EVENT_ID_SOURCE#_#BTN_ID#</TOOLTIP_ENTRY_0>
			</UseTemplate>
		</Component>
		<!-- Knob have different functions based on context -->
		<Component ID="#KNOB_100_NODE_ID#" Node="#KNOB_100_NODE_ID#">
			<Parameters Type="Override">
				<KNOB_ID>Inner_Knob</KNOB_ID>
			</Parameters>
			<UseInputEvent ID="#USE_INPUT_EVENT#">
				<SET_STATE_EXTERNAL>p0 0 &gt; if{ (&gt;H:#KEY_PREFIX#_Knob_Inner_INC) } els{ (&gt;H:#KEY_PREFIX#_Knob_Inner_DEC) }</SET_STATE_EXTERNAL>
				<TT_DESCRIPTION_ID>@TT_Package.AUTOPILOT_KNOB_ALTITUDESELECTED_ACTION_ADJUST</TT_DESCRIPTION_ID>
				<GET_TT_VALUE_STATE>(A:AUTOPILOT ALTITUDE LOCK VAR, feet) sp0</GET_TT_VALUE_STATE>
				<FORMAT_VALUE>l0 '%d ft' @sprintf</FORMAT_VALUE>
			</UseInputEvent>
			<UseTemplate Name="ASOBO_GT_Knob_Infinite">
				<ANIM_NAME>#KNOB_100_ANIM_NAME#</ANIM_NAME>
				<CLOCKWISE_CODE>1 (&gt;B:#INPUT_EVENT_ID_SOURCE#_#KNOB_ID#_Inc)</CLOCKWISE_CODE>
				<ANTICLOCKWISE_CODE>1 (&gt;B:#INPUT_EVENT_ID_SOURCE#_#KNOB_ID#_Dec)</ANTICLOCKWISE_CODE>
				<WWISE_EVENT>navcom_frequency_inner_knob</WWISE_EVENT>
				<TOOLTIP_TITLE>@TT_Package.AUTOPILOT_KNOB_ALTITUDESELECTED_TITLE</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>#INPUT_EVENT_ID_SOURCE#_#KNOB_ID#</TOOLTIP_ENTRY_0>
				<COUNT>36</COUNT>
			</UseTemplate>
		</Component>
		<Component ID="#KNOB_1000_NODE_ID#" Node="#KNOB_1000_NODE_ID#">
			<Parameters Type="Override">
				<KNOB_ID>Outer_Knob</KNOB_ID>
			</Parameters>
			<UseInputEvent ID="#USE_INPUT_EVENT#">
				<SET_STATE_EXTERNAL>p0 0 &gt; if{ (&gt;H:#KEY_PREFIX#_Knob_Outer_INC) } els{ (&gt;H:#KEY_PREFIX#_Knob_Outer_DEC) }</SET_STATE_EXTERNAL>
				<TT_DESCRIPTION_ID>@TT_Package.AUTOPILOT_KNOB_ALTITUDESELECTED_ACTION_ADJUST</TT_DESCRIPTION_ID>
				<GET_TT_VALUE_STATE>(A:AUTOPILOT ALTITUDE LOCK VAR, feet) sp0</GET_TT_VALUE_STATE>
				<FORMAT_VALUE>l0 '%d ft' @sprintf</FORMAT_VALUE>
			</UseInputEvent>
			<UseTemplate Name="ASOBO_GT_Knob_Infinite">
				<ANIM_NAME>#KNOB_1000_ANIM_NAME#</ANIM_NAME>
				<CLOCKWISE_CODE>1 (&gt;B:#INPUT_EVENT_ID_SOURCE#_#KNOB_ID#_Inc)</CLOCKWISE_CODE>
				<ANTICLOCKWISE_CODE>1 (&gt;B:#INPUT_EVENT_ID_SOURCE#_#KNOB_ID#_Dec)</ANTICLOCKWISE_CODE>
				<WWISE_EVENT>navcom_frequency_outer_knob</WWISE_EVENT>
				<TOOLTIP_TITLE>@TT_Package.AUTOPILOT_KNOB_ALTITUDESELECTED_TITLE</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>#INPUT_EVENT_ID_SOURCE#_#KNOB_ID#</TOOLTIP_ENTRY_0>
				<COUNT>36</COUNT>
			</UseTemplate>
		</Component>
	</Template>

</ModelBehaviors>