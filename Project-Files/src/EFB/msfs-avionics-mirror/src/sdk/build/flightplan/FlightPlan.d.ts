import { FlightPlanLeg, OneWayRunway } from '../navigation/Facilities';
import { FlightPathCalculator } from './FlightPathCalculator';
import { FlightPlanSegment, FlightPlanSegmentType, LegDefinition, ProcedureDetails, VerticalData } from './FlightPlanning';
export declare enum PlanChangeType {
    Added = "Added",
    Inserted = "Inserted",
    Removed = "Removed",
    Changed = "Changed",
    Cleared = "Cleared"
}
export declare enum ActiveLegType {
    Lateral = "Lateral",
    Vertical = "Vertical",
    Calculating = "Calculating"
}
export declare enum OriginDestChangeType {
    OriginAdded = "OriginAdded",
    OriginRemoved = "OriginRemoved",
    DestinationAdded = "DestinationAdded",
    DestinationRemoved = "DestinationRemoved"
}
/** Direct To Metadata for Flight Plan. */
export interface DirectToData {
    /** The segment index of the direct to target. */
    segmentIndex: number;
    /** The segment leg index of the direct to target. */
    segmentLegIndex: number;
}
/**
 * Events generated by changes in the flight plan.
 */
export interface PlanEvents {
    /**
     * An event generated when there is a change in a leg.
     * @param segmentIndex The index of the segment.
     * @param index The index of the leg.
     * @param type The type of change.
     * @param leg The leg that was changed.
     */
    onLegChanged?(segmentIndex: number, index: number, type: PlanChangeType, leg?: LegDefinition): void;
    /**
     * An event generated when there is a change in a segment.
     * @param index The index of the segment.
     * @param type The type of change.
     * @param segment The segment that was changed.
     */
    onSegmentChanged?(index: number, type: PlanChangeType, segment?: FlightPlanSegment): void;
    /**
     * An event generated when an active leg is changed.
     * @param index The index of the leg.
     * @param segmentIndex The index of the flight plan segment.
     * @param previousSegmentIndex The index of the previously active segment.
     * @param previousLegIndex The index of the previously active leg in the previously active segment.
     * @param type The type of leg that was changed.
     */
    onActiveLegChanged?(index: number, segmentIndex: number, legIndex: number, previousSegmentIndex: number, previousLegIndex: number, type: ActiveLegType): void;
    /**
     * An event fired when a flight plan vectorization completes.
     * @param index The index that the path was generated from.
     */
    onCalculated?(index?: number): void;
    /**
     * An event fired when the origin or destination changes.
     * @param type The origin/destination change type.
     * @param airport The airport that was changed.
     */
    onOriginDestChanged?(type: OriginDestChangeType, airport?: string): void;
    /**
     * An event fired when the procedure details change.
     * @param details The details that were changed.
     */
    onProcedureDetailsChanged?(details: ProcedureDetails): void;
    /**
     * An event fired when user data is set in the plan.
     * @param key The key of the user data.
     * @param data The data that was set.
     */
    onUserDataSet?(key: string, data: any): void;
    /**
     * An event fired when user data is deleted in the plan.
     * @param key The key of the user data to delete.
     */
    onUserDataDelete?(key: string): void;
    /**
     * An event fired when direct to data is changed in the plan.
     * @param directToData The direct to data.
     */
    onDirectDataChanged?(directToData: DirectToData): void;
}
/**
 * A flight plan managed by the flight plan system.
 */
export declare class FlightPlan {
    planIndex: number;
    calculator: FlightPathCalculator;
    private onLegNameRequested;
    private _originAirport?;
    /** The ICAO of the origin airport in the flight plan, if any. */
    get originAirport(): string | undefined;
    private _destinationAirport?;
    /** The ICAO of the destination airport in the flight plan, if any. */
    get destinationAirport(): string | undefined;
    private _activeLateralLeg;
    /** The global index of the currently active lateral navigation leg. */
    get activeLateralLeg(): number;
    private _activeVerticalLeg;
    /** The global index of the currently active vertical navigation leg. */
    get activeVerticalLeg(): number;
    private _activeCalculatingLeg;
    /** The global index of the currently active calculating leg. */
    get activeCalculatingLeg(): number;
    /** The direct to metadata for this plan. */
    readonly directToData: DirectToData;
    /**
     * Gets the current number of legs in the flight plan.
     * @returns The number of legs in the plan.
     */
    get length(): number;
    /**
     * Gets the current number of segments in the flight plan.
     * @returns The number of legs in the plan.
     */
    get segmentCount(): number;
    /** Events fired when the plan is modified. */
    events: PlanEvents;
    /** The details about the selected procedures. */
    readonly procedureDetails: ProcedureDetails;
    /** The flight plan segments that make up this flight plan. */
    private readonly planSegments;
    /** User assignable data. */
    private readonly userData;
    /**
     * Creates an instance of a FlightPlan.
     * @param planIndex The index within the flight planner of this flight plan.
     * @param calculator The flight path calculator to use to calculate the flight path.
     * @param onLegNameRequested A callback fired when a flight plan leg is to be named.
     */
    constructor(planIndex: number, calculator: FlightPathCalculator, onLegNameRequested: ((leg: FlightPlanLeg) => string | undefined));
    /**
     * Gets this flight plan's legs.
     * @param reverse Whether to get the legs in reverse order. False by default.
     * @param startIndex The global leg index of the leg with which to start. Defaults to 0 if `reverse` is false or
     * `this.length` if `reverse` is true.
     * @returns A generator which yields this flight plan's legs.
     */
    legs(reverse?: boolean, startIndex?: number): Generator<LegDefinition, void>;
    /**
     * Gets this flight plan's legs in forward order.
     * @param startIndex The global leg index of the leg with which to start. Defaults to 0.
     * @yields This flight plan's legs in forward order.
     */
    private _legs;
    /**
     * Gets this flight plan's legs in reverse order.
     * @param startIndex The global leg index of the leg with which to start. Defaults to `this.length - 1`.
     * @yields This flight plan's legs in reverse order.
     */
    private _legsReverse;
    /**
     * Gets the segments for the flightplan.
     * @yields The flight plan segments.
     */
    segments(): Generator<FlightPlanSegment, void>;
    /**
     * Gets all of the segments of a given type.
     * @param segmentType The type of the segments to retrieve.
     * @yields The segments of the requested type.
     */
    segmentsOfType(segmentType: FlightPlanSegmentType): Generator<FlightPlanSegment, void>;
    /**
     * Adds a segment to the flight plan at a specified index.
     * @param segmentIndex The index of the flight plan segment.
     * @param segmentType The type of segment this will be.
     * @param airway The airway this segment is made up of, if any.
     * @param notify Whether or not to send notifications after the operation.
     * @returns The new flight plan segment.
     */
    addSegment(segmentIndex: number, segmentType?: FlightPlanSegmentType, airway?: string, notify?: boolean): FlightPlanSegment;
    /**
     * Inserts a segment into the flight plan at the specified index and
     * reflows the subsequent segments.
     * @param segmentIndex The index to insert the flight plan segment.
     * @param segmentType The type of segment this will be.
     * @param airway The airway this segment is made up of, if any
     * @param notify Whether or not to send notifications after the operation.
     * @returns The new flight plan segment.
     */
    insertSegment(segmentIndex: number, segmentType?: FlightPlanSegmentType, airway?: string, notify?: boolean): FlightPlanSegment;
    /**
     * Reflows the flight plan segments after an insert.
     */
    private reflowSegments;
    /**
     * Deletes a segment from the flight plan, leaving an empty segment at the specified index.
     * @param segmentIndex The index of the segment to remove.
     * @param notify Whether or not to send notifications after the operation.
     */
    deleteSegment(segmentIndex: number, notify?: boolean): void;
    /**
     * Removes a segment from the flight plan and reflows the segments following
     * the removed segment, not leaving an empty segment at the specified index.
     * @param segmentIndex The index of the segment to remove.
     * @param notify Whether or not to send notifications after the operation.
     */
    removeSegment(segmentIndex: number, notify?: boolean): void;
    /**
     * Gets a flight plan segment from the plan.
     * @param segmentIndex The index of the segment to get; if not specified returns the active segment.
     * @returns The requested flight plan segment.
     * @throws An error if the flight plan segment could not be found.
     */
    getSegment(segmentIndex?: number): FlightPlanSegment;
    /**
     * Adds a leg to the flight plan.
     * @param segmentIndex The segment to add the leg to.
     * @param leg The leg to add to the plan.
     * @param segmentLegIndex The index of the leg in the segment to insert. Will add to the end of the segment if omitted.
     * @param flags Leg definition flags to apply to the new leg. Defaults to `None` (0).
     * @param notify Whether or not to send notifications after the operation.
     * @returns the leg that was added.
     */
    addLeg(segmentIndex: number, leg: FlightPlanLeg, segmentLegIndex?: number, flags?: number, notify?: boolean): LegDefinition;
    /**
     * Gets a leg from the flight plan.
     * @param segmentIndex The index of the segment containing the leg to get.
     * @param segmentLegIndex The index of the leg to get in its segment.
     * @returns A flight plan leg.
     * @throws An error if the leg could not be found.
     */
    getLeg(segmentIndex: number, segmentLegIndex: number): LegDefinition;
    /**
     * Gets a leg from the flight plan.
     * @param globalLegIndex The global leg index of the leg to get.
     * @returns A flight plan leg.
     * @throws An error if the leg could not be found.
     */
    getLeg(globalLegIndex: number): LegDefinition;
    /**
     * Attempts to get a leg from the flight plan.
     * @param segmentIndex The index of the segment containing the leg to get.
     * @param segmentLegIndex The index of the leg to get in its segment.
     * @returns A flight plan leg, or `null` if one could not be found at the specified index.
     */
    tryGetLeg(segmentIndex: number, segmentLegIndex: number): LegDefinition | null;
    /**
     * Attempts to get a leg from the flight plan.
     * @param globalLegIndex The global leg index of the leg to get.
     * @returns A flight plan leg, or `null` if one could not be found at the specified index.
     */
    tryGetLeg(globalLegIndex: number): LegDefinition | null;
    /**
     * Attempts to get a leg from the flight plan.
     * @param arg1 The global leg index of the leg to get, or the index of the segment containing the leg to get.
     * @param arg2 The index of the leg to get in its segment.
     * @returns A flight plan leg, or `null` if one could not be found at the specified index.
     */
    private _tryGetLeg;
    /**
     * Removes a leg from the flight plan.
     * @param segmentIndex The segment to add the leg to.
     * @param segmentLegIndex The index of the leg in the segment to remove. Will remove from the end of the segment if ommitted.
     * @param notify Whether or not to send notifications after the operation.
     * @returns the leg that was removed, or null if a leg was not removed.
     */
    removeLeg(segmentIndex: number, segmentLegIndex?: number, notify?: boolean): LegDefinition | null;
    /**
     * Calculates the flight path for the plan.
     * @param globalLegIndex The global leg index to start calculating from.
     * @param notify Whether or not to send notifications after the operation.
     */
    calculate(globalLegIndex?: number, notify?: boolean): Promise<void>;
    /**
     * Sets the origin airport in the flight plan.
     * @param facilityIcao The origin airport to set.
     * @param notify Whether or not to send notifications after the operation.
     */
    setOriginAirport(facilityIcao: string, notify?: boolean): void;
    /**
     * Removes the origin airport from the flight plan.
     * @param notify Whether or not to send notifications after the operation.
     */
    removeOriginAirport(notify?: boolean): void;
    /**
     * Sets the destination airport in the flight plan.
     * @param facilityIcao The destination airport to set.
     * @param notify Whether or not to send notifications after the operation.
     */
    setDestinationAirport(facilityIcao: string, notify?: boolean): void;
    /**
     * Removes the destination airport from the flight plan.
     * @param notify Whether or not to send notifications after the operation.
     */
    removeDestinationAirport(notify?: boolean): void;
    /**
     * Sets the active lateral leg index in the flight plan.
     * @param globalLegIndex The global leg index to set.
     * @param notify Whether or not to send notifications after the operation.
     */
    setLateralLeg(globalLegIndex: number, notify?: boolean): void;
    /**
     * Sets the active lateral leg index in the flight plan.
     * @param globalLegIndex The global leg index to set.
     * @param notify Whether or not to send notifications after the operation.
     */
    setVerticalLeg(globalLegIndex: number, notify?: boolean): void;
    /**
     * Sets the active calculating leg index in the flight plan.
     * @param globalLegIndex The global leg index to set.
     * @param notify Whether or not to send notifications after the operation.
     */
    setCalculatingLeg(globalLegIndex: number, notify?: boolean): void;
    /**
     * Sets the flight plan procedure details.
     * @param details The details of the flight plan's procedures.
     * @param notify Whether or not to send notifications after the operation.
     */
    setProcedureDetails(details: Partial<ProcedureDetails>, notify?: boolean): void;
    /**
     * Gets the global index of a flight plan leg in this flight plan.
     * @param leg A flight plan leg definition.
     * @returns the global index of the leg, or -1 if the leg is not in this flight plan.
     */
    getLegIndexFromLeg(leg: LegDefinition): number;
    /**
     * Gets the flight plan segment to which a leg belongs.
     * @param leg A flight plan leg definition.
     * @returns The segment to which the leg belongs, or null if the leg is not in this flight plan.
     */
    getSegmentFromLeg(leg: LegDefinition): FlightPlanSegment | null;
    /**
     * Gets the segment index for a given global leg index.
     * @param globalLegIndex The global leg index to get the segment index for.
     * @returns The segment index for the given global leg index, or -1 if not found.
     */
    getSegmentIndex(globalLegIndex: number): number;
    /**
     * Gets the segment leg index (the index of the leg in its segment) for a given global leg index.
     * @param globalLegIndex The global leg index to get the segment leg index for.
     * @returns The segment leg index, or -1 if not found.
     */
    getSegmentLegIndex(globalLegIndex: number): number;
    /**
     * Gets the leg immediately previous to a position in this flight plan specified by segment index and leg index.
     * @param segmentIndex A segment index.
     * @param legIndex A leg index.
     * @returns the leg immediately previous to the specified position, or null if there is no such leg.
     */
    getPrevLeg(segmentIndex: number, legIndex: number): LegDefinition | null;
    /**
     * Gets the leg immediately after a position in this flight plan specified by segment index and leg index.
     * @param segmentIndex A segment index.
     * @param legIndex A leg index.
     * @returns the leg immediately after the specified position, or null if there is no such leg.
     */
    getNextLeg(segmentIndex: number, legIndex: number): LegDefinition | null;
    /**
     * Sets the direct to data for this plan.
     * @param globalLegIndex The global leg index of the direct to target, or -1 if the direct to data is to be cleared.
     * @param notify Whether to send an event for this change. Defaults to true.
     */
    setDirectToData(globalLegIndex: number, notify?: boolean): void;
    /**
     * Sets the direct to data for this plan.
     * @param segmentIndex The segment index of the direct to target, or -1 if the direct to data is to be cleared.
     * @param segmentLegIndex The segment leg index of the direct to target, or -1 if the direct to data is to be
     * cleared.
     * @param notify Whether to send an event for this change. Defaults to true.
     */
    setDirectToData(segmentIndex: number, segmentLegIndex: number, notify?: boolean): void;
    /**
     * Sets the direct to data for this plan.
     * @param leg The target leg of the direct to, or null if the direct to data is to be cleared.
     * @param notify Whether to send an event for this change. Defaults to true.
     */
    setDirectToData(leg: LegDefinition | null, notify?: boolean): void;
    /**
     * Sets the vertical data for this plan leg.
     * @param segmentIndex The segment index of the leg in the plan to add vertical data to.
     * @param segmentLegIndex The segment leg index of the leg in the plan to add vertical data to.
     * cleared.
     * @param verticalData The Vertical Data for this leg.
     * @param notify Whether to send an event for this change. Defaults to true.
     */
    setLegVerticalData(segmentIndex: number, segmentLegIndex: number, verticalData: VerticalData, notify?: boolean): void;
    /**
     * Sets the vertical data for this plan leg.
     * @param globalLegIndex The global leg index in the plan for the leg to add vertical data to.
     * @param verticalData The Vertical Data for this leg.
     * @param notify Whether to send an event for this change. Defaults to true.
     */
    setLegVerticalData(globalLegIndex: number, verticalData: VerticalData, notify?: boolean): void;
    /**
     * Sets the airway for a segment.
     * @param segmentIndex A segment index.
     * @param airway The airway name.
     * @param notify is whether to send an event for this change
     */
    setAirway(segmentIndex: number, airway?: string, notify?: boolean): void;
    /**
     * Sets user data in the flight plan.
     * @param key The key of the user data.
     * @param data The data to set.
     * @param notify Whether or not to notify subscribers.
     */
    setUserData<T>(key: string, data: T, notify?: boolean): void;
    /**
     * Sets user data in the flight plan.
     * @param key The key of the user data.
     * @param notify Whether or not to notify subscribers.
     */
    deleteUserData(key: string, notify?: boolean): void;
    /**
     * Gets user data from the flight plan.
     * @param key The key of the user data.
     * @returns The user data, if found.
     */
    getUserData<T>(key: string): T | undefined;
    /**
     * Reflows all flight plan segment offsets after a plan change.
     */
    private reflowSegmentOffsets;
    /**
     * Sets the origin runway in procedure details.
     * @param runway The oneway runway to set as the origin, or undefined
     * @param notify Whether or not to notify subscribers.
     */
    setOriginRunway(runway?: OneWayRunway | undefined, notify?: boolean): void;
    /**
     * Sets the destination runway in procedure details.
     * @param runway The oneway runway to set as the destination, or undefined
     * @param notify Whether or not to notify subscribers.
     */
    setDestinationRunway(runway?: OneWayRunway | undefined, notify?: boolean): void;
    /**
     * Sets the departure procedure details.
     * @param facilityIcao The facility ICAO of the facility containing the procedure
     * @param departureIndex The index of the departure in the origin airport information
     * @param departureTransitionIndex The index of the departure transition in the origin airport departure information
     * @param departureRunwayIndex The index of the selected runway in the original airport departure information
     * @param notify Whether or not to notify subscribers.
     */
    setDeparture(facilityIcao?: string | undefined, departureIndex?: number, departureTransitionIndex?: number, departureRunwayIndex?: number, notify?: boolean): void;
    /**
     * Sets the arrival procedure details.
     * @param facilityIcao The facility ICAO of the facility containing the procedure
     * @param arrivalIndex The index of the arrival in the destination airport information
     * @param arrivalTransitionIndex index of the arrival transition in the destination airport arrival information
     * @param arrivalRunwayTransitionIndex The index of the selected runway transition at the destination airport arrival information
     * @param notify Whether or not to notify subscribers
     */
    setArrival(facilityIcao?: string | undefined, arrivalIndex?: number, arrivalTransitionIndex?: number, arrivalRunwayTransitionIndex?: number, notify?: boolean): void;
    /**
     * Sets the approach procedure details.
     * @param facilityIcao The facility ICAO of the facility containing the procedure
     * @param approachIndex The index of the apporach in the destination airport information
     * @param approachTransitionIndex The index of the approach transition in the destination airport approach information
     * @param notify Whether or not to notify subscribers
     */
    setApproach(facilityIcao?: string | undefined, approachIndex?: number, approachTransitionIndex?: number, notify?: boolean): void;
    /**
     * Copies the flight plan.
     * @param planIndex The flight plan index to assign to this plan, or the same plan
     * index if not provided.
     * @returns The copied flight plan.
     */
    copy(planIndex?: number): FlightPlan;
    /**
     * Creates a default instance of a flight plan leg.
     * @param partial A portion of leg options to apply.
     * @returns A default instance of a flight plan leg.
     */
    static createLeg: (partial: Partial<FlightPlanLeg>) => FlightPlanLeg;
}
//# sourceMappingURL=FlightPlan.d.ts.map